name: Pipeline CI
 
on:
  push:
    branches:
      - master
 
jobs:
  version:
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Importante para buscar todas as tags e histórico completo
          token: ${{ secrets.CI_GITHUB_TOKEN }}
 
      - name: Configurar Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
 
      - name: Instalar dependências
        run: npm install
 
      - name: Instalar semver
        run: npm install -g semver
 
      - name: Verificar e criar tag inicial se não existir
        id: create_initial_tag
        env:
          GH_TOKEN: ${{ secrets.CI_GH_TOKEN }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          
          # Verifica se a tag v0.0.0 já existe
          if ! git rev-parse "v0.0.0" >/dev/null 2>&1; then
            git tag -a v0.0.0 -m "Initial release"
            git push origin v0.0.0
          fi
 
      - name: Calcular nova versão
        id: version
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG="v0.0.0"
          fi
          echo "Versão Atual: $LAST_TAG"
          
          # Modificação para corrigir o loop de commits
          COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" | tr '\n' ' ')
          
          echo "Commits desde a última tag:"
          echo "$COMMITS"
          
          # Inicializando variáveis
          MAJOR=0
          MINOR=0
          PATCH=0
          
          # Analisando mensagens de commit
          if [[ "$COMMITS" == *"BREAKING CHANGE"* ]]; then
            MAJOR=1
          elif [[ "$COMMITS" == *"feat"* ]]; then
            MINOR=1
          elif [[ "$COMMITS" == *"fix"* ]]; then
            PATCH=1
          fi
          
          # Calculando a nova versão usando semver
          CURRENT_VERSION=${LAST_TAG#v}
          NEW_VERSION=$CURRENT_VERSION
          if [[ $MAJOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i major $CURRENT_VERSION)
          elif [[ $MINOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i minor $CURRENT_VERSION)
          elif [[ $PATCH -eq 1 ]]; then
            NEW_VERSION=$(semver -i patch $CURRENT_VERSION)
          fi
          
          echo "Nova versão: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
 
      - name: Atualizar versão no package.json
        run: |
          npm version ${{ env.new_version }} --no-git-tag-version 
      
      - name: Commit mudanças
        env:
          GH_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          
          # Adiciona todas as mudanças pendentes
          git add package.json package-lock.json
          
          # Verifica se há mudanças para commitar
          if [[ -n "$(git status --porcelain)" ]]; then
            git commit -m "chore(release): version ${{ env.new_version }}"
            git push origin master
          else
            echo "Sem mudanças para commitar"
          fi
