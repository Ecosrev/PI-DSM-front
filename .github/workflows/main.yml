name: Pipeline CI

on:
  push:
    branches:
      - master
    paths:
      - '!package.json'  # Exclui mudanças só no package.json

jobs:
  build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore(release)')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Configurando Node
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Instalando dependências
        run: npm install

      - name: Build
        run: npm run build

  versioning:
    runs-on: ubuntu-latest
    needs: build
    if: "!contains(github.event.head_commit.message, 'chore(release)')"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configurando Node
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Obter versão atual
        id: version
        run: |
          VERSION=$(cat package.json | jq -r '.version')
          echo "current_version=$VERSION" >> $GITHUB_ENV

      - name: Determinar incremento de versão
        id: increment
        run: |
          LAST_COMMIT=$(git log -1 --pretty=%B)
          if [[ "$LAST_COMMIT" == feat:* ]]; then
            INCREMENT="minor"
          elif [[ "$LAST_COMMIT" == fix:* ]]; then
            INCREMENT="patch"
          elif [[ "$LAST_COMMIT" == major:* ]]; then
            INCREMENT="major"
          else
            INCREMENT="patch" # fallback
          fi
          echo "increment_type=$INCREMENT" >> $GITHUB_ENV

      - name: Incrementar versão
        id: new_version
        run: |
          CURRENT_VERSION=${{ env.current_version }}
          INCREMENT_TYPE=${{ env.increment_type }}

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          if [ "$INCREMENT_TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$INCREMENT_TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$INCREMENT_TYPE" = "patch" ]; then
            PATCH=$((PATCH + 1))
          fi
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"

          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Atualizar versão no package.json
        run: |
          NEW_VERSION=${{ env.new_version }}
          jq ".version = \"$NEW_VERSION\"" package.json > package.tmp.json && mv package.tmp.json package.json

      - name: Commitar nova versão
        env:
          GH_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add package.json
          git commit -m "chore(release): ${{ env.new_version }} [skip ci]"
          git tag -a "v${{ env.new_version }}" -m "Release version ${{ env.new_version }}"
          git push origin master --tags
